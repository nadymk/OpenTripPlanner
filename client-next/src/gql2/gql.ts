/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "  \n  query lines {\n    lines {\n      name\n      quays {\n        name\n        longitude\n        latitude\n      }\n    }\n  }\n": types.LinesDocument,
    "\n  query serverInfo {\n    serverInfo {\n      version\n      otpSerializationVersionId\n      buildConfigVersion\n      routerConfigVersion\n      gitCommit\n      gitBranch\n    }\n  }\n": types.ServerInfoDocument,
    "\n  query trip(\n    $from: Location!\n    $to: Location!\n    $arriveBy: Boolean\n    $dateTime: DateTime\n    $numTripPatterns: Int\n    $searchWindow: Int\n    $modes: Modes\n    $itineraryFiltersDebug: ItineraryFilterDebugProfile\n    $pageCursor: String\n  ) {\n    trip(\n      from: $from\n      to: $to\n      arriveBy: $arriveBy\n      dateTime: $dateTime\n      numTripPatterns: $numTripPatterns\n      searchWindow: $searchWindow\n      modes: $modes\n      itineraryFilters: { debug: $itineraryFiltersDebug }\n      pageCursor: $pageCursor\n    ) {\n      previousPageCursor\n      nextPageCursor\n      debugOutput {\n        totalTime\n      }\n      \n      fromPlace {\n        name\n        latitude\n        longitude\n      }\n      toPlace {\n        name\n        latitude\n        longitude\n      }\n      tripPatterns {\n        aimedStartTime\n        aimedEndTime\n        expectedEndTime\n        expectedStartTime\n        generalizedCost\n        duration\n        distance\n        legs {\n          id\n          mode\n          aimedStartTime\n          aimedEndTime\n          expectedEndTime\n          expectedStartTime\n          generalizedCost\n          realtime\n          distance\n          intermediateQuays {\n            name\n            latitude\n            longitude\n            publicCode\n            estimatedCalls {\n              expectedArrivalTime\n            }\n          }\n          # serviceJourney {\n          #   publicCode\n          #   privateCode\n          #   quays {\n          #     name\n          #     latitude\n          #     longitude\n          #     publicCode\n          #   }\n          # }\n          duration\n          fromPlace {\n            name\n            latitude\n            longitude\n          }\n          toPlace {\n            name\n            latitude\n            longitude\n          }\n          toEstimatedCall {\n            quay {\n              name\n              latitude\n              longitude\n              publicCode\n              stopPlace {\n                id\n                name\n              }\n            }\n            destinationDisplay {\n              frontText\n            }\n          }\n          line {\n            publicCode\n            name\n          }\n          authority {\n            name\n          }\n          pointsOnLink {\n            points\n          }\n        }\n        systemNotices {\n          tag\n        }\n      }\n    }\n  }\n": types.TripDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "  \n  query lines {\n    lines {\n      name\n      quays {\n        name\n        longitude\n        latitude\n      }\n    }\n  }\n"): (typeof documents)["  \n  query lines {\n    lines {\n      name\n      quays {\n        name\n        longitude\n        latitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query serverInfo {\n    serverInfo {\n      version\n      otpSerializationVersionId\n      buildConfigVersion\n      routerConfigVersion\n      gitCommit\n      gitBranch\n    }\n  }\n"): (typeof documents)["\n  query serverInfo {\n    serverInfo {\n      version\n      otpSerializationVersionId\n      buildConfigVersion\n      routerConfigVersion\n      gitCommit\n      gitBranch\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query trip(\n    $from: Location!\n    $to: Location!\n    $arriveBy: Boolean\n    $dateTime: DateTime\n    $numTripPatterns: Int\n    $searchWindow: Int\n    $modes: Modes\n    $itineraryFiltersDebug: ItineraryFilterDebugProfile\n    $pageCursor: String\n  ) {\n    trip(\n      from: $from\n      to: $to\n      arriveBy: $arriveBy\n      dateTime: $dateTime\n      numTripPatterns: $numTripPatterns\n      searchWindow: $searchWindow\n      modes: $modes\n      itineraryFilters: { debug: $itineraryFiltersDebug }\n      pageCursor: $pageCursor\n    ) {\n      previousPageCursor\n      nextPageCursor\n      debugOutput {\n        totalTime\n      }\n      \n      fromPlace {\n        name\n        latitude\n        longitude\n      }\n      toPlace {\n        name\n        latitude\n        longitude\n      }\n      tripPatterns {\n        aimedStartTime\n        aimedEndTime\n        expectedEndTime\n        expectedStartTime\n        generalizedCost\n        duration\n        distance\n        legs {\n          id\n          mode\n          aimedStartTime\n          aimedEndTime\n          expectedEndTime\n          expectedStartTime\n          generalizedCost\n          realtime\n          distance\n          intermediateQuays {\n            name\n            latitude\n            longitude\n            publicCode\n            estimatedCalls {\n              expectedArrivalTime\n            }\n          }\n          # serviceJourney {\n          #   publicCode\n          #   privateCode\n          #   quays {\n          #     name\n          #     latitude\n          #     longitude\n          #     publicCode\n          #   }\n          # }\n          duration\n          fromPlace {\n            name\n            latitude\n            longitude\n          }\n          toPlace {\n            name\n            latitude\n            longitude\n          }\n          toEstimatedCall {\n            quay {\n              name\n              latitude\n              longitude\n              publicCode\n              stopPlace {\n                id\n                name\n              }\n            }\n            destinationDisplay {\n              frontText\n            }\n          }\n          line {\n            publicCode\n            name\n          }\n          authority {\n            name\n          }\n          pointsOnLink {\n            points\n          }\n        }\n        systemNotices {\n          tag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query trip(\n    $from: Location!\n    $to: Location!\n    $arriveBy: Boolean\n    $dateTime: DateTime\n    $numTripPatterns: Int\n    $searchWindow: Int\n    $modes: Modes\n    $itineraryFiltersDebug: ItineraryFilterDebugProfile\n    $pageCursor: String\n  ) {\n    trip(\n      from: $from\n      to: $to\n      arriveBy: $arriveBy\n      dateTime: $dateTime\n      numTripPatterns: $numTripPatterns\n      searchWindow: $searchWindow\n      modes: $modes\n      itineraryFilters: { debug: $itineraryFiltersDebug }\n      pageCursor: $pageCursor\n    ) {\n      previousPageCursor\n      nextPageCursor\n      debugOutput {\n        totalTime\n      }\n      \n      fromPlace {\n        name\n        latitude\n        longitude\n      }\n      toPlace {\n        name\n        latitude\n        longitude\n      }\n      tripPatterns {\n        aimedStartTime\n        aimedEndTime\n        expectedEndTime\n        expectedStartTime\n        generalizedCost\n        duration\n        distance\n        legs {\n          id\n          mode\n          aimedStartTime\n          aimedEndTime\n          expectedEndTime\n          expectedStartTime\n          generalizedCost\n          realtime\n          distance\n          intermediateQuays {\n            name\n            latitude\n            longitude\n            publicCode\n            estimatedCalls {\n              expectedArrivalTime\n            }\n          }\n          # serviceJourney {\n          #   publicCode\n          #   privateCode\n          #   quays {\n          #     name\n          #     latitude\n          #     longitude\n          #     publicCode\n          #   }\n          # }\n          duration\n          fromPlace {\n            name\n            latitude\n            longitude\n          }\n          toPlace {\n            name\n            latitude\n            longitude\n          }\n          toEstimatedCall {\n            quay {\n              name\n              latitude\n              longitude\n              publicCode\n              stopPlace {\n                id\n                name\n              }\n            }\n            destinationDisplay {\n              frontText\n            }\n          }\n          line {\n            publicCode\n            name\n          }\n          authority {\n            name\n          }\n          pointsOnLink {\n            points\n          }\n        }\n        systemNotices {\n          tag\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;